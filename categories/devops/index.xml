<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DevOps on Jiang Jun Jie&#39;s Site</title>
    <link>https://www.jiangjunjie.cn/categories/devops/</link>
    <description>Recent content in DevOps on Jiang Jun Jie&#39;s Site</description>
    <image>
      <title>Jiang Jun Jie&#39;s Site</title>
      <url>https://www.jiangjunjie.cn/papermod-cover.png</url>
      <link>https://www.jiangjunjie.cn/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Sep 2022 11:02:46 +0800</lastBuildDate><atom:link href="https://www.jiangjunjie.cn/categories/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker ELK</title>
      <link>https://www.jiangjunjie.cn/posts/docker-elk/</link>
      <pubDate>Thu, 08 Sep 2022 11:02:46 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-elk/</guid>
      <description>docker compose files https://github.com/deviantony/docker-elk</description>
    </item>
    
    <item>
      <title>Docker GeoServer</title>
      <link>https://www.jiangjunjie.cn/posts/docker-geoserver/</link>
      <pubDate>Thu, 08 Sep 2022 10:54:53 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-geoserver/</guid>
      <description>version: &amp;#39;3.1&amp;#39; services: geoserver: image: geonode/geoserver:2.18.2 container_name: geoserver volumes: - /opt/geoserver/data:/geoserver_data/data ports: - 18080:8080 restart: always </description>
    </item>
    
    <item>
      <title>Docker OSM</title>
      <link>https://www.jiangjunjie.cn/posts/docker-osm/</link>
      <pubDate>Thu, 08 Sep 2022 10:53:13 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-osm/</guid>
      <description>version: &amp;#39;3.2&amp;#39; services: osm: image: overv/openstreetmap-tile-server:latest container_name: osm volumes: - openstreetmap-data:/var/lib/postgresql/12/main # environment: # - ALLOW_CORS=enabled ports: - 28080:80 restart: always command: &amp;#34;run&amp;#34; networks: - proxy volumes: openstreetmap-data: external: true networks: proxy: external: true </description>
    </item>
    
    <item>
      <title>Docker Oracle11gR2</title>
      <link>https://www.jiangjunjie.cn/posts/docker-oracle11gr2/</link>
      <pubDate>Thu, 08 Sep 2022 10:33:04 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-oracle11gr2/</guid>
      <description>version: &amp;#39;3.1&amp;#39; services: oracle-xe: image: gvenzl/oracle-xe:11 container_name: oracle-xe restart: always user: 1000:1000 environment: - ORACLE_PASSWORD={password} volumes: - ./data:/u01/app/oracle/oradata ports: - 1521:1521 network_mode: bridge version: &amp;#39;3.1&amp;#39; services: oracle11g: image: registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g container_name: oracle11g privileged: true ports: - 1521:1521 restart: always volumes: - /home/oracle/oradata:/home/oracle/app/oracle/oradata network_mode: bridge root的默认密码为helowin oracle默认密码为oracle </description>
    </item>
    
    <item>
      <title>Docker Keycloak</title>
      <link>https://www.jiangjunjie.cn/posts/docker-keycloak/</link>
      <pubDate>Thu, 08 Sep 2022 10:13:00 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-keycloak/</guid>
      <description>version: &amp;#39;3&amp;#39; volumes: postgres_data: driver: local services: postgres: image: postgres volumes: - postgres_data:/var/lib/postgresql/data environment: POSTGRES_DB: keycloak POSTGRES_USER: keycloak POSTGRES_PASSWORD: {db password} keycloak: image: quay.io/keycloak/keycloak:legacy environment: DB_VENDOR: POSTGRES DB_ADDR: postgres DB_DATABASE: keycloak DB_USER: keycloak DB_SCHEMA: public DB_PASSWORD: {db password} KEYCLOAK_USER: admin KEYCLOAK_PASSWORD: {password} # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn&amp;#39;t be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>https://www.jiangjunjie.cn/posts/k8s/</link>
      <pubDate>Tue, 15 Jun 2021 15:37:24 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/k8s/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://www.jiangjunjie.cn/posts/nginx/</link>
      <pubDate>Tue, 30 Mar 2021 14:19:29 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/nginx/</guid>
      <description>安装和配置Nginx容器 文件目录 /home/nginx/conf.d 用于存放配置文件
/home/nginx/cert 用于存放https证书
/home/nginx/html 用于存放网页文件
/home/nginx/logs 用于存放日志
运行nginx容器 docker run -d \ --name nginx --restart always \ -p 80:80 -p 443:443 \ -e &amp;#34;TZ=Asia/Shanghai&amp;#34; \ -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf \ -v /home/nginx/conf.d:/etc/nginx/conf.d \ -v /home/nginx/logs:/var/log/nginx \ -v /home/nginx/cert:/etc/nginx/cert \ -v /home/nginx/html:/usr/share/nginx/html \ nginx:alpine 配置nginx 这里使用Nginx反向代理访问后端服务，由于容器内部通信，因此需要使用容器的IP，也就是172.17.0.1。 在/home/nginx/conf.d创建一个{name}.conf的配置文件，文件内容如下 server { listen 80; server_name 域名/外网IP; index index.html; root /usr/share/nginx/html/{name}/dist; #dist上传的路径 # 避免访问出现 404 错误 location / { try_files $uri $uri/ @router; index index.</description>
    </item>
    
    <item>
      <title>Install PostgreSQL in CentOS 7.4</title>
      <link>https://www.jiangjunjie.cn/posts/install-postgresql-in-centos-7.4/</link>
      <pubDate>Tue, 30 Mar 2021 14:04:08 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/install-postgresql-in-centos-7.4/</guid>
      <description> 进入PostgreSQL官网：https://www.postgresql.org/download/linux/redhat/ 选择软件版本和系统版本 在服务器上执行脚本，以CentOS7.4和PostgreSQL13为例 # Install the repository RPM: sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm # Install PostgreSQL: sudo yum install -y postgresql13-server # Optionally initialize the database and enable automatic start: sudo /usr/pgsql-13/bin/postgresql-13-setup initdb sudo systemctl enable postgresql-13 sudo systemctl start postgresql-13 远程连接，密码配置 配置文件路径/var/lib/pgsql/13/data/pg_hba.conf。修改127.0.0.1/32为0.0.0.0/0 配置文件路径/var/lib/pgsql/13/data/postgresql.conf。修改listen_address=&amp;quot;*&amp;quot;,取消port=5432的注释 重启postgresql 配置防火墙，放行5432端口 sudo firewall-cmd --permanent --add-port=5432/tcp sudo firewall-cmd –reload 修改密码 su – postgres psql ALTER USER postgres WITH PASSWORD &amp;#39;这里输入你的密码&amp;#39;; \q exit </description>
    </item>
    
    <item>
      <title>Use Docker to Deploy SpringBoot Jar </title>
      <link>https://www.jiangjunjie.cn/posts/use-docker-to-deploy-springboot-jar-/</link>
      <pubDate>Tue, 30 Mar 2021 14:03:01 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/use-docker-to-deploy-springboot-jar-/</guid>
      <description> 构建与启动Java容器。IntelliJ IDEA运行Gradle bootjar命令 将生成的jar包上传到服务器目录，比如/data目录。 在/data目录创建Dockerfile 文件 FROM java:8 ARG JAR_FILE=./*.jar COPY ${JAR_FILE} app.jar ENV TZ=Asia/Shanghai ENTRYPOINT [&amp;#34;java&amp;#34;,&amp;#34;-jar&amp;#34;,&amp;#34;/app.jar&amp;#34;] 构建镜像 docker build -t {image}:{tag} . (注意最后有点.) 运行 docker run -d \ --name {name} --restart always \ -p {port}:{port} \ -e &amp;#34;TZ=Asia/Shanghai&amp;#34; \ -e DB_HOST=172.17.0.1 \ -e DB_PWD=mysql_pwd \ -e REDIS_HOST=172.17.0.1 \ -v /data/userData:{镜像内路径} \ {image}:{tag} docker-compose.yml # coming soon </description>
    </item>
    
    <item>
      <title>Docker MongoDB</title>
      <link>https://www.jiangjunjie.cn/posts/docker-mongodb/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-mongodb/</guid>
      <description>start mongodb 4.4 in docker,use ~/mongo/data to persist data docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: mongodb: image: mongo:4.4 command: mongod --auth volumes: - ~/mongo/data:/data/db ports: - 27017:27017 restart: always environment: MONGO_INITDB_ROOT_USERNAME: {username} MONGO_INITDB_ROOT_PASSWORD: {password} </description>
    </item>
    
    <item>
      <title>Docker MySQL</title>
      <link>https://www.jiangjunjie.cn/posts/docker-mysql/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-mysql/</guid>
      <description>start mysql8 in docker,use ~/mysql/data to persist data docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: mysql: image: mysql:8 container_name: mysql command: --default-authentication-plugin=mysql_native_password volumes: - mysql-data:/var/lib/mysql ports: - 3306:3306 restart: always environment: MYSQL_ROOT_PASSWORD: {your password} TZ: Asia/Shanghai network_mode: bridge volumes: mysql-data: external: true </description>
    </item>
    
    <item>
      <title>Docker PgAdmin4</title>
      <link>https://www.jiangjunjie.cn/posts/docker-pgadmin4/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-pgadmin4/</guid>
      <description>start pgadmin4 5.1 in docker docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: pgadmin4: image: dpage/pgadmin4:5.1 ports: - 8081:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} </description>
    </item>
    
    <item>
      <title>Docker PostgreSQL</title>
      <link>https://www.jiangjunjie.cn/posts/docker-postgresql/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-postgresql/</guid>
      <description>start postgresql 13 and pgadmin4 5.1 in docker,use ~/postgresql/data to persist data docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: postgresql: image: postgres:13 volumes: - ~/postgresql/data:/var/lib/postgresql/data ports: - 5432:5432 restart: always environment: POSTGRES_PASSWORD: {password} pgadmin4: image: dpage/pgadmin4:5.1 ports: - 80:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} </description>
    </item>
    
    <item>
      <title>Docker RabbitMQ</title>
      <link>https://www.jiangjunjie.cn/posts/docker-rabbitmq/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-rabbitmq/</guid>
      <description>start rabbitmq 3.8.14 and management plugin in docker docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: rabbitmq: image: rabbitmq:3.8.14-management ports: - 15672:15672 - 5672:5672 restart: always environment: RABBITMQ_DEFAULT_USER: {username} RABBITMQ_DEFAULT_PASS: {password} </description>
    </item>
    
    <item>
      <title>Docker Redis</title>
      <link>https://www.jiangjunjie.cn/posts/docker-redis/</link>
      <pubDate>Wed, 24 Mar 2021 14:57:02 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-redis/</guid>
      <description>start redis 6.2 in docker,use ~/redis/data to persist data docker-compose.yml
version: &amp;#39;3.1&amp;#39; services: redis: image: redis:latest container_name: redis command: redis-server --requirepass {password} --appendonly yes #command: redis-server /usr/local/etc/redis/redis.conf volumes: - ~/redis/redis.conf:/usr/local/etc/redis/redis.conf - redis-data:/data ports: - 6379:6379 restart: always network_mode: bridge volumes: redis-data: external: true redis.conf
requirepass {password} appendonly yes daemonize no </description>
    </item>
    
    <item>
      <title>Docker Compose</title>
      <link>https://www.jiangjunjie.cn/posts/docker-compose/</link>
      <pubDate>Wed, 24 Mar 2021 14:30:04 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker-compose/</guid>
      <description>Install Docker Compose V2 in CentOS7.4 Docker Engine Installed cmd mkdir -p ~/.docker/cli-plugins/ curl -SL https://github.com/docker/compose/releases/download/v2.0.1/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose chmod +x ~/.docker/cli-plugins/docker-compose To install Docker Compose for all users on your system, replace ~/.docker/cli-plugins with /usr/local/lib/docker/cli-plugins docker compose version 新版本Docker自带Docker Compose V2 </description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://www.jiangjunjie.cn/posts/docker/</link>
      <pubDate>Wed, 17 Mar 2021 13:58:53 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/docker/</guid>
      <description>Install # use aliyun mirror curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun mirrors { &amp;#34;registry-mirrors&amp;#34;: [ &amp;#34;https://dockerproxy.com&amp;#34;, &amp;#34;https://registry.docker-cn.com&amp;#34; ] } # registry sudo docker run -d -p 5000:5000 --restart always --name registry -v docker-registry:/var/lib/registry registry:2 # nexus oss3 sudo docker volume create nexus-data sudo docker run -d --restart always -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3 issue 在docker容器内部执行 jmap命令报错 Operation not permitted # Docker 自1.10版本开始加入的安全特性。类似于 jmap 这些 JDK 工具依赖于 Linux 的 PTRACE_ATTACH,而是Docker自1.</description>
    </item>
    
    <item>
      <title>Install Gitlab CE in CentOS 7.4</title>
      <link>https://www.jiangjunjie.cn/posts/install-gitlab-ce-in-centos-7.4/</link>
      <pubDate>Wed, 17 Mar 2021 10:50:56 +0800</pubDate>
      
      <guid>https://www.jiangjunjie.cn/posts/install-gitlab-ce-in-centos-7.4/</guid>
      <description>Introduce Tell you how to install Gitlab CE(Community Edition) in CentOS 7.4 step by step.
Doc https://about.gitlab.com/install/?version=ce#centos-7
Install # Prerequisite sudo yum install -y curl policycoreutils-python openssh-server openssh-clients perl sudo systemctl enable sshd sudo systemctl start sshd # Firewall setting sudo firewall-cmd --permanent --add-service=http sudo firewall-cmd --permanent --add-service=https sudo systemctl reload firewalld # Install Gitlab ce repo curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash # Install Gitlab CE and set EXTERNAL_URL(your ip or host,http or https) sudo EXTERNAL_URL=&amp;#34;http://192.</description>
    </item>
    
  </channel>
</rss>
