[{"content":"Contine 1,2,3\n","permalink":"https://www.jiangjunjie.cn/posts/ruoyi/","summary":"Contine 1,2,3","title":"Ruoyi"},{"content":"version: \u0026#39;3.3\u0026#39; services: aliyundrive-webdav: container_name: aliyundrive-webdav restart: unless-stopped ports: - \u0026#39;6666:8080\u0026#39; environment: - \u0026#39;REFRESH_TOKEN=\u0026#39; image: messense/aliyundrive-webdav https://github.com/messense/aliyundrive-webdav\n","permalink":"https://www.jiangjunjie.cn/posts/docker-aliyun-webdav/","summary":"version: \u0026#39;3.3\u0026#39; services: aliyundrive-webdav: container_name: aliyundrive-webdav restart: unless-stopped ports: - \u0026#39;6666:8080\u0026#39; environment: - \u0026#39;REFRESH_TOKEN=\u0026#39; image: messense/aliyundrive-webdav https://github.com/messense/aliyundrive-webdav","title":"Docker Aliyun Webdav"},{"content":"version: \u0026#39;3\u0026#39; services: yapi-web: image: jayfong/yapi:latest container_name: yapi-web ports: - 40001:3000 environment: - YAPI_ADMIN_ACCOUNT=%email% - YAPI_ADMIN_PASSWORD=%password% - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=yapi-mongo - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] depends_on: - yapi-mongo links: - yapi-mongo restart: unless-stopped yapi-mongo: image: mongo:latest container_name: yapi-mongo volumes: - ./data/db:/data/db expose: - 27017 restart: unless-stopped ","permalink":"https://www.jiangjunjie.cn/posts/docker-yapi/","summary":"version: \u0026#39;3\u0026#39; services: yapi-web: image: jayfong/yapi:latest container_name: yapi-web ports: - 40001:3000 environment: - YAPI_ADMIN_ACCOUNT=%email% - YAPI_ADMIN_PASSWORD=%password% - YAPI_CLOSE_REGISTER=true - YAPI_DB_SERVERNAME=yapi-mongo - YAPI_DB_PORT=27017 - YAPI_DB_DATABASE=yapi - YAPI_MAIL_ENABLE=false - YAPI_LDAP_LOGIN_ENABLE=false - YAPI_PLUGINS=[] depends_on: - yapi-mongo links: - yapi-mongo restart: unless-stopped yapi-mongo: image: mongo:latest container_name: yapi-mongo volumes: - ./data/db:/data/db expose: - 27017 restart: unless-stopped ","title":"Docker Yapi"},{"content":"Dockerfile FROM ubuntu:22.04 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y ca-certificates RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN apt-get update \u0026amp;\u0026amp; apt-get install -y wget java-common RUN wget https://corretto.aws/downloads/resources/17.0.6.10.1/java-17-amazon-corretto-jdk_17.0.6.10-1_amd64.deb RUN dpkg --install java-17-amazon-corretto-jdk_17.0.6.10-1_amd64.deb RUN apt-get install -y ffmpeg Build sudo docker build -t corretto17-ffmpeg:1.0 .\n","permalink":"https://www.jiangjunjie.cn/posts/docker-ffmpeg/","summary":"Dockerfile FROM ubuntu:22.04 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y ca-certificates RUN mv /etc/apt/sources.list /etc/apt/sources.list.bak RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN echo \u0026#34;deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse\u0026#34; \u0026gt;\u0026gt; /etc/apt/sources.list RUN apt-get update \u0026amp;\u0026amp; apt-get install -y wget java-common RUN wget https://corretto.","title":"Docker FFmpeg"},{"content":"version: \u0026#39;3.4\u0026#39; services: redisinsight: image: redislabs/redisinsight:latest container_name: redis-insight environment: - TZ=Asia/Shanghai ports: - \u0026#34;8001:8001\u0026#34; volumes: - redisinsight-data:/db restart: always network_mode: bridge volumes: redisinsight-data: external: false ","permalink":"https://www.jiangjunjie.cn/posts/redisinsight/","summary":"version: \u0026#39;3.4\u0026#39; services: redisinsight: image: redislabs/redisinsight:latest container_name: redis-insight environment: - TZ=Asia/Shanghai ports: - \u0026#34;8001:8001\u0026#34; volumes: - redisinsight-data:/db restart: always network_mode: bridge volumes: redisinsight-data: external: false ","title":"Redisinsight"},{"content":"start https://help.penpot.app/technical-guide/getting-started/#start-penpot\nwget https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml ","permalink":"https://www.jiangjunjie.cn/posts/penpot/","summary":"start https://help.penpot.app/technical-guide/getting-started/#start-penpot\nwget https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml ","title":"Penpot"},{"content":"docker-compose.yml version: \u0026#39;3.3\u0026#39; services: jenkins: image: jenkins/jenkins:lts restart: unless-stopped privileged: true ports: - 8081:8080 container_name: jenkins volumes: - jenkins_data:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock - /usr/local/bin/docker:/usr/local/bin/docker volumes: jenkins_data: external: false ","permalink":"https://www.jiangjunjie.cn/posts/jenkins/","summary":"docker-compose.yml version: \u0026#39;3.3\u0026#39; services: jenkins: image: jenkins/jenkins:lts restart: unless-stopped privileged: true ports: - 8081:8080 container_name: jenkins volumes: - jenkins_data:/var/jenkins_home - /var/run/docker.sock:/var/run/docker.sock - /usr/local/bin/docker:/usr/local/bin/docker volumes: jenkins_data: external: false ","title":"Jenkins"},{"content":"vue 项目中使用hik h5player 下载海康h5player安装包 public 文件夹下新建hik_video文件夹，将安装包中的bin文件夹复制到hik_video文件夹下 public 文件夹下index.html。添加如下代码 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;\u0026lt;%= BASE_URL %\u0026gt;hik_video/h5player.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; src\\assets 文件夹下新建hik_video文件夹，将安装包中的bin文件夹复制到hik_video文件夹下 src\\components 文件夹下新建HikH5Player文件夹，创建index.vue文件 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;player\u0026#34; style=\u0026#34;width: 800px;height: 600px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import \u0026#39;@/assets/hik_video/h5player.min.js\u0026#39; import {getPreviewUrl, getPlaybackUrl} from \u0026#39;@/api/data/camera\u0026#39; export default { name: \u0026#39;hik-h5player\u0026#39;, data(){ return { //播放器对象 player: null, splitNum: 1, mode: 1, } }, mounted() { this.createPlayer() this.init() }, methods: { init() { // 设置播放容器的宽高并监听窗口大小变化 window.addEventListener(\u0026#39;resize\u0026#39;, () =\u0026gt; { this.player.JS_Resize() }) }, /** * 初始化播放器 */ createPlayer() { this.player = new window.JSPlugin({ // 需要英文字母开头 必填 szId: \u0026#39;player\u0026#39;, // 必填,引用H5player.min.js的js相对路径 szBasePath: \u0026#39;./hik_video\u0026#39;, // 当容器div#play_window有固定宽高时，可不传iWidth和iHeight，窗口大小将自适应容器宽高 iWidth: 600, iHeight: 400, // 分屏播放，默认最大分屏4*4 iMaxSplit: 16, iCurrentSplit: this.splitNum, // 样式 oStyle: { border: \u0026#39;#343434\u0026#39;, borderSelect: \u0026#39;#FFCC00\u0026#39;, background: \u0026#39;#000\u0026#39; } }) // 事件回调绑定 this.player.JS_SetWindowControlCallback({ windowEventSelect: function (iWndIndex) { //插件选中窗口回调 console.log(\u0026#39;windowSelect callback: \u0026#39;, iWndIndex); }, pluginErrorHandler: function (iWndIndex, iErrorCode, oError) { //插件错误回调 console.log(\u0026#39;pluginError callback: \u0026#39;, iWndIndex, iErrorCode, oError); }, windowEventOver: function (iWndIndex) { //鼠标移过回调 //console.log(iWndIndex); }, windowEventOut: function (iWndIndex) { //鼠标移出回调 //console.log(iWndIndex); }, windowEventUp: function (iWndIndex) { //鼠标mouseup事件回调 //console.log(iWndIndex); }, windowFullCcreenChange: function (bFull) { //全屏切换回调 console.log(\u0026#39;fullScreen callback: \u0026#39;, bFull); }, firstFrameDisplay: function (iWndIndex, iWidth, iHeight) { //首帧显示回调 console.log(\u0026#39;firstFrame loaded callback: \u0026#39;, iWndIndex, iWidth, iHeight); }, performanceLack: function () { //性能不足回调 console.log(\u0026#39;performanceLack callback: \u0026#39;); } }); }, /** * 窗口分屏 */ arrangeWindow(splitNum) { this.splitNum = splitNum this.player.JS_ArrangeWindow(splitNum).then( () =\u0026gt; { console.log(`arrangeWindow to ${splitNum}x${splitNum} success`) }, e =\u0026gt; { console.error(e) } ) }, /** * 全屏 */ wholeFullScreen() { this.player.JS_FullScreenDisplay(true).then( () =\u0026gt; { console.log(`wholeFullScreen success`) }, e =\u0026gt; { console.error(e) } ) }, /** * 获取取流链接 * @returns {*} */ realplay(code,transmode,index) { let {player, mode} = this if(index === null || index === undefined){ index = player.currentWindowIndex } if(transmode === null || transmode === undefined){ transmode = 1 } const param = { \u0026#39;cameraIndexCode\u0026#39;: code, \u0026#39;transmode\u0026#39;: transmode } getPreviewUrl(param).then(response =\u0026gt; { let playURL =response.data.url this.player.JS_Play(playURL, {playURL, mode}, index).then( () =\u0026gt; { console.log(\u0026#39;realplay success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }); }, stopPlay() { this.player.JS_Stop(this.player.currentWindowIndex).then( () =\u0026gt; { console.log(\u0026#39;stop realplay success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }, stopAllPlay() { this.player.JS_StopRealPlayAll().then( () =\u0026gt; { console.log(\u0026#39;stopAllPlay success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }, /** * 获取回放链接 2021-06-29T00:00:00Z * @returns {AxiosPromise} */ playback(code,transmode,startTime,endTime) { startTime += \u0026#39;+08:00\u0026#39; endTime += \u0026#39;+08:00\u0026#39; let { player, mode } = this, index = player.currentWindowIndex //todo const param = { \u0026#34;cameraIndexCode\u0026#34;: code, \u0026#34;startTime\u0026#34;: startTime, \u0026#34;endTime\u0026#34;: endTime, \u0026#39;protocol\u0026#39;: \u0026#39;ws\u0026#39;, \u0026#34;transmode\u0026#34;: transmode } getPlaybackUrl(param).then(response =\u0026gt; { let playURL =response.data.url this.player.JS_Play(playURL, { playURL, mode }, index, startTime, endTime).then( () =\u0026gt; { console.log(\u0026#39;playbackStart success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }); }, playbackPause() { this.player.JS_Pause(this.player.currentWindowIndex).then( () =\u0026gt; { console.log(\u0026#39;playbackPause success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }, playbackResume() { this.player.JS_Resume(this.player.currentWindowIndex).then( () =\u0026gt; { console.log(\u0026#39;playbackResume success\u0026#39;) }, e =\u0026gt; { console.error(e) } ) }, playbackSlow(){ this.player.JS_Slow(this.player.currentWindowIndex).then( rate =\u0026gt; { console.log(\u0026#39;playbackSlow success. rate=\u0026#39; + rate) }, e =\u0026gt; { console.error(e) } ) }, playbackFast(){ this.player.JS_Fast(this.player.currentWindowIndex).then( rate =\u0026gt; { console.log(\u0026#39;playbackFast success. rate=\u0026#39; + rate) }, e =\u0026gt; { console.error(e) } ) } } } \u0026lt;/script\u0026gt; //获取摄像机预览地址 export function getPreviewUrl(data){ return request({ url: \u0026#39;/data/camera/getPreviewUrl\u0026#39;, method: \u0026#39;post\u0026#39;, data: data }) } //获取摄像机录像地址 export function getPlaybackUrl(data){ return request({ url: \u0026#39;/data/camera/getPlaybackUrl\u0026#39;, method: \u0026#39;post\u0026#39;, data: data }) } 使用海康openapi获取摄像机的ws视频流地址 记录问题 海康h5player插件，需要海康服务器特定版本的流媒体网关，否则无法使用。 不支持大华摄像机，会报错 jsdecoder1.0 unsupport dahua video\n","permalink":"https://www.jiangjunjie.cn/posts/hik-h5player/","summary":"vue 项目中使用hik h5player 下载海康h5player安装包 public 文件夹下新建hik_video文件夹，将安装包中的bin文件夹复制到hik_video文件夹下 public 文件夹下index.html。添加如下代码 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;\u0026lt;%= BASE_URL %\u0026gt;hik_video/h5player.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; src\\assets 文件夹下新建hik_video文件夹，将安装包中的bin文件夹复制到hik_video文件夹下 src\\components 文件夹下新建HikH5Player文件夹，创建index.vue文件 \u0026lt;template\u0026gt; \u0026lt;div id=\u0026#34;player\u0026#34; style=\u0026#34;width: 800px;height: 600px;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script\u0026gt; import \u0026#39;@/assets/hik_video/h5player.min.js\u0026#39; import {getPreviewUrl, getPlaybackUrl} from \u0026#39;@/api/data/camera\u0026#39; export default { name: \u0026#39;hik-h5player\u0026#39;, data(){ return { //播放器对象 player: null, splitNum: 1, mode: 1, } }, mounted() { this.createPlayer() this.init() }, methods: { init() { // 设置播放容器的宽高并监听窗口大小变化 window.addEventListener(\u0026#39;resize\u0026#39;, () =\u0026gt; { this.player.JS_Resize() }) }, /** * 初始化播放器 */ createPlayer() { this.","title":"Hik H5player"},{"content":"openclash 旁路由状态下，外网端口映射问题 启用旁路由模式 启用fake-ip tun-混合模式（udp-tun,tcp转发） 黑白名单-绕过核心的来源端口9443 ","permalink":"https://www.jiangjunjie.cn/posts/openwrt/","summary":"openclash 旁路由状态下，外网端口映射问题 启用旁路由模式 启用fake-ip tun-混合模式（udp-tun,tcp转发） 黑白名单-绕过核心的来源端口9443 ","title":"Openwrt"},{"content":"install as docker container #host docker run -d --name=glances --restart=\u0026#34;always\u0026#34; --network=host -e GLANCES_OPT=\u0026#34;-w\u0026#34; -v /var/run/docker.sock:/var/run/docker.sock:ro --pid host nicolargo/glances:latest-full #bridge docker run -d --name=glances --restart=\u0026#34;always\u0026#34; -p 61208-61209:61208-61209 -e GLANCES_OPT=\u0026#34;-w\u0026#34; -v /var/run/docker.sock:/var/run/docker.sock:ro --pid host nicolargo/glances:latest-full ","permalink":"https://www.jiangjunjie.cn/posts/glacnes/","summary":"install as docker container #host docker run -d --name=glances --restart=\u0026#34;always\u0026#34; --network=host -e GLANCES_OPT=\u0026#34;-w\u0026#34; -v /var/run/docker.sock:/var/run/docker.sock:ro --pid host nicolargo/glances:latest-full #bridge docker run -d --name=glances --restart=\u0026#34;always\u0026#34; -p 61208-61209:61208-61209 -e GLANCES_OPT=\u0026#34;-w\u0026#34; -v /var/run/docker.sock:/var/run/docker.sock:ro --pid host nicolargo/glances:latest-full ","title":"Glacnes"},{"content":"install yum install hddtemp apt install hddtemp # start service at 7634 systemctl enable hddtemp systemctl start hddtemp #config file vi /etc/default/hddtemp #1. uncomment DISKS and set vaule /dev/sd[bcd] #2. set RUN_DAEMON=\u0026#34;true\u0026#34; yum install netcat apt install netcat # test nc localhost 7634 ","permalink":"https://www.jiangjunjie.cn/posts/hddtemp/","summary":"install yum install hddtemp apt install hddtemp # start service at 7634 systemctl enable hddtemp systemctl start hddtemp #config file vi /etc/default/hddtemp #1. uncomment DISKS and set vaule /dev/sd[bcd] #2. set RUN_DAEMON=\u0026#34;true\u0026#34; yum install netcat apt install netcat # test nc localhost 7634 ","title":"Hddtemp"},{"content":"The HTTP request is not acceptable for the requested resource 页面header添加\n\u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer\u0026#34; /\u0026gt; ","permalink":"https://www.jiangjunjie.cn/posts/html/","summary":"The HTTP request is not acceptable for the requested resource 页面header添加\n\u0026lt;meta name=\u0026#34;referrer\u0026#34; content=\u0026#34;no-referrer\u0026#34; /\u0026gt; ","title":"Html"},{"content":"windows 启用远程关机 服务中RemoteRegistry改成自动\nin Regedit\nHKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/System\ncreate DWORD LocalAccountTokenFilterPolicy, give it the value 1\n","permalink":"https://www.jiangjunjie.cn/posts/rpc_shutdown/","summary":"windows 启用远程关机 服务中RemoteRegistry改成自动\nin Regedit\nHKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Windows/CurrentVersion/Policies/System\ncreate DWORD LocalAccountTokenFilterPolicy, give it the value 1","title":"Rpc_shutdown"},{"content":"快照Snapshot http://username:password@ip:port[80]/ISAPI/Streaming/channels/101/picture http://username:password@ip:port[80]/ISAPI/ContentMgmt/StreamingProxy/channels/101/picture\nRTSP rtsp://username:password@ip:port[554]/ISAPI/Streaming/Channels/101\nISSUE NVR POE设备，无法直连摄像机 开启网络-高级配置-其他-启用虚拟主机\n摄像机可以通过http://nvr_ip:6500[通道号] 来访问摄像机页面 ","permalink":"https://www.jiangjunjie.cn/posts/hikvision/","summary":"快照Snapshot http://username:password@ip:port[80]/ISAPI/Streaming/channels/101/picture http://username:password@ip:port[80]/ISAPI/ContentMgmt/StreamingProxy/channels/101/picture\nRTSP rtsp://username:password@ip:port[554]/ISAPI/Streaming/Channels/101\nISSUE NVR POE设备，无法直连摄像机 开启网络-高级配置-其他-启用虚拟主机\n摄像机可以通过http://nvr_ip:6500[通道号] 来访问摄像机页面 ","title":"Hikvision"},{"content":"docker compose files https://github.com/deviantony/docker-elk\n","permalink":"https://www.jiangjunjie.cn/posts/docker-elk/","summary":"docker compose files https://github.com/deviantony/docker-elk","title":"Docker ELK"},{"content":"version: \u0026#39;3.1\u0026#39; services: geoserver: image: geonode/geoserver:2.18.2 container_name: geoserver volumes: - /opt/geoserver/data:/geoserver_data/data ports: - 18080:8080 restart: always ","permalink":"https://www.jiangjunjie.cn/posts/docker-geoserver/","summary":"version: \u0026#39;3.1\u0026#39; services: geoserver: image: geonode/geoserver:2.18.2 container_name: geoserver volumes: - /opt/geoserver/data:/geoserver_data/data ports: - 18080:8080 restart: always ","title":"Docker GeoServer"},{"content":"version: \u0026#39;3.2\u0026#39; services: osm: image: overv/openstreetmap-tile-server:latest container_name: osm volumes: - openstreetmap-data:/var/lib/postgresql/12/main # environment: # - ALLOW_CORS=enabled ports: - 28080:80 restart: always command: \u0026#34;run\u0026#34; networks: - proxy volumes: openstreetmap-data: external: true networks: proxy: external: true ","permalink":"https://www.jiangjunjie.cn/posts/docker-osm/","summary":"version: \u0026#39;3.2\u0026#39; services: osm: image: overv/openstreetmap-tile-server:latest container_name: osm volumes: - openstreetmap-data:/var/lib/postgresql/12/main # environment: # - ALLOW_CORS=enabled ports: - 28080:80 restart: always command: \u0026#34;run\u0026#34; networks: - proxy volumes: openstreetmap-data: external: true networks: proxy: external: true ","title":"Docker OSM"},{"content":"version: \u0026#39;3.1\u0026#39; services: oracle-xe: image: gvenzl/oracle-xe:11 container_name: oracle-xe restart: always user: 1000:1000 environment: - ORACLE_PASSWORD={password} volumes: - ./data:/u01/app/oracle/oradata ports: - 1521:1521 network_mode: bridge version: \u0026#39;3.1\u0026#39; services: oracle11g: image: registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g container_name: oracle11g privileged: true ports: - 1521:1521 restart: always volumes: - /home/oracle/oradata:/home/oracle/app/oracle/oradata network_mode: bridge root的默认密码为helowin oracle默认密码为oracle ","permalink":"https://www.jiangjunjie.cn/posts/docker-oracle11gr2/","summary":"version: \u0026#39;3.1\u0026#39; services: oracle-xe: image: gvenzl/oracle-xe:11 container_name: oracle-xe restart: always user: 1000:1000 environment: - ORACLE_PASSWORD={password} volumes: - ./data:/u01/app/oracle/oradata ports: - 1521:1521 network_mode: bridge version: \u0026#39;3.1\u0026#39; services: oracle11g: image: registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g container_name: oracle11g privileged: true ports: - 1521:1521 restart: always volumes: - /home/oracle/oradata:/home/oracle/app/oracle/oradata network_mode: bridge root的默认密码为helowin oracle默认密码为oracle ","title":"Docker Oracle11gR2"},{"content":"version: \u0026#39;3\u0026#39; volumes: postgres_data: driver: local services: postgres: image: postgres volumes: - postgres_data:/var/lib/postgresql/data environment: POSTGRES_DB: keycloak POSTGRES_USER: keycloak POSTGRES_PASSWORD: {db password} keycloak: image: quay.io/keycloak/keycloak:legacy environment: DB_VENDOR: POSTGRES DB_ADDR: postgres DB_DATABASE: keycloak DB_USER: keycloak DB_SCHEMA: public DB_PASSWORD: {db password} KEYCLOAK_USER: admin KEYCLOAK_PASSWORD: {password} # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn\u0026#39;t be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it. #JDBC_PARAMS: \u0026#34;ssl=true\u0026#34; ports: - 8888:8080 depends_on: - postgres ","permalink":"https://www.jiangjunjie.cn/posts/docker-keycloak/","summary":"version: \u0026#39;3\u0026#39; volumes: postgres_data: driver: local services: postgres: image: postgres volumes: - postgres_data:/var/lib/postgresql/data environment: POSTGRES_DB: keycloak POSTGRES_USER: keycloak POSTGRES_PASSWORD: {db password} keycloak: image: quay.io/keycloak/keycloak:legacy environment: DB_VENDOR: POSTGRES DB_ADDR: postgres DB_DATABASE: keycloak DB_USER: keycloak DB_SCHEMA: public DB_PASSWORD: {db password} KEYCLOAK_USER: admin KEYCLOAK_PASSWORD: {password} # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn\u0026#39;t be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.","title":"Docker Keycloak"},{"content":"Nginx Issue nginx处理redirect location端口丢失的问题 反向代理 proxy_set_header Host $http_host; # 这里 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; 访问目录没带/ if (-d $request_filename) { rewrite [^/]$ $scheme://$http_host$uri/ permanent; } 跨域访问CORS add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; add_header \u0026#39;Access-Control-Allow-Methods\u0026#39; \u0026#39;GET, POST, PUT, DELETE, OPTIONS\u0026#39;; add_header \u0026#39;Access-Control-Allow-Headers\u0026#39; \u0026#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\u0026#39;; add_header \u0026#39;Access-Control-Allow-Credentials\u0026#39; \u0026#39;true\u0026#39;; 上传文件 client_max_body_size 64m; ","permalink":"https://www.jiangjunjie.cn/posts/nginx-issue/","summary":"Nginx Issue nginx处理redirect location端口丢失的问题 反向代理 proxy_set_header Host $http_host; # 这里 proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; 访问目录没带/ if (-d $request_filename) { rewrite [^/]$ $scheme://$http_host$uri/ permanent; } 跨域访问CORS add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; add_header \u0026#39;Access-Control-Allow-Methods\u0026#39; \u0026#39;GET, POST, PUT, DELETE, OPTIONS\u0026#39;; add_header \u0026#39;Access-Control-Allow-Headers\u0026#39; \u0026#39;DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type\u0026#39;; add_header \u0026#39;Access-Control-Allow-Credentials\u0026#39; \u0026#39;true\u0026#39;; 上传文件 client_max_body_size 64m; ","title":"Nginx Issue"},{"content":"Hikvision Camera RTSP new version Real rtsp://username:password@\u0026lt;address\u0026gt;:\u0026lt;port\u0026gt;/Streaming/Channels/\u0026lt;id\u0026gt;(?parm1=value1\u0026amp;parm2-=value2…) 注：VLC或者EasyPlayer可以支持解析URL里的用户名密码，实际发给设备的RTSP请求不支持带用户名密码。\nusername：用户名 password：密码 address： 设备IP地址 port： RTSP端口 id： 通道号\u0026amp;码流类型\n101：通道1主码流\n102：通道1子码流\n103：通道1第三码流\n1701：通道17主码流\n001：零通道主码流 其他参数：例如多播?transportmode=multicast new version Track rtsp://username:password@\u0026lt;address\u0026gt;:\u0026lt;port\u0026gt;/Streaming/tracks/\u0026lt;id\u0026gt;(?parm1=value1\u0026amp;parm2-=value2…) 注：VLC或者EasyPlayer可以支持解析URL里的用户名密码，实际发给设备的RTSP请求不支持带用户名密码。\nusername：用户名 password：密码 address： 设备IP地址 port： RTSP端口 id： 通道号\u0026amp;码流类型\n101：通道1主码流\n102：通道1子码流\n103：通道1第三码流\n1701：通道17主码流\n001：零通道主码流 其他参数：例如多播?starttime=20210808t020312z\u0026amp;endtime=20210808t020411z 时间范围是starttime到endtime，其中starttime和endtime的格式要符合ISO 8601。具体格式是YYYYMMDD”T”HHmmSS.fraction”Z”，Y是年，M是月，D是日，T是时间分格符，H是小时，M是分，S是秒，Z是可选的、表示Zulu(GMT) 时间。\n","permalink":"https://www.jiangjunjie.cn/posts/hik-camera/","summary":"Hikvision Camera RTSP new version Real rtsp://username:password@\u0026lt;address\u0026gt;:\u0026lt;port\u0026gt;/Streaming/Channels/\u0026lt;id\u0026gt;(?parm1=value1\u0026amp;parm2-=value2…) 注：VLC或者EasyPlayer可以支持解析URL里的用户名密码，实际发给设备的RTSP请求不支持带用户名密码。\nusername：用户名 password：密码 address： 设备IP地址 port： RTSP端口 id： 通道号\u0026amp;码流类型\n101：通道1主码流\n102：通道1子码流\n103：通道1第三码流\n1701：通道17主码流\n001：零通道主码流 其他参数：例如多播?transportmode=multicast new version Track rtsp://username:password@\u0026lt;address\u0026gt;:\u0026lt;port\u0026gt;/Streaming/tracks/\u0026lt;id\u0026gt;(?parm1=value1\u0026amp;parm2-=value2…) 注：VLC或者EasyPlayer可以支持解析URL里的用户名密码，实际发给设备的RTSP请求不支持带用户名密码。\nusername：用户名 password：密码 address： 设备IP地址 port： RTSP端口 id： 通道号\u0026amp;码流类型\n101：通道1主码流\n102：通道1子码流\n103：通道1第三码流\n1701：通道17主码流\n001：零通道主码流 其他参数：例如多播?starttime=20210808t020312z\u0026amp;endtime=20210808t020411z 时间范围是starttime到endtime，其中starttime和endtime的格式要符合ISO 8601。具体格式是YYYYMMDD”T”HHmmSS.fraction”Z”，Y是年，M是月，D是日，T是时间分格符，H是小时，M是分，S是秒，Z是可选的、表示Zulu(GMT) 时间。","title":"Hik Camera"},{"content":"ms word template engine for java https://github.com/Sayi/poi-tl\n","permalink":"https://www.jiangjunjie.cn/posts/poi-tl/","summary":"ms word template engine for java https://github.com/Sayi/poi-tl","title":"Poi Tl"},{"content":"ORA-12505, TNS:listener does not currently know of SID given in connect descriptor select INSTANCE_NAME from v$instance; 归档和备份 su - oracle sqlplus /nolog sqlplus user/password [as sysdba] select * from v$flash_recovery_area_usage; select * from v$recovery_file_dest; select space_limit/1024/1024/1024, space_used/1024/1024/1024, space_reclaimable,number_of_files from v$recovery_file_dest; rman target / # archive # 确认归档模式的状态 ARCHIVE LOG LIST; DELETE ARCHIVELOG ALL; # 关闭自动归档 ALTER DATABASE NOARCHIVELOG; # 清空归档日志 ALTER SYSTEM SWITCH LOGFILE; # backup DELETE BACKUP; 初始化设置 alter user system identified by password; ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; ALTER SYSTEM SET db_create_file_dest = \u0026#34;/home/oracle/app/oracle/oradata\u0026#34;; alter tablespace system add datafile \u0026#39;/home/oracle/app/oracle/oradata/helowin/system2.dbf\u0026#39; size 10G autoextend off; select tablespace_name,file_name,online_status from dba_data_files where tablespace_name=\u0026#39;EXAMPLE\u0026#39;; alter system set processes = 2000 scope = spfile; ","permalink":"https://www.jiangjunjie.cn/posts/oracle/","summary":"ORA-12505, TNS:listener does not currently know of SID given in connect descriptor select INSTANCE_NAME from v$instance; 归档和备份 su - oracle sqlplus /nolog sqlplus user/password [as sysdba] select * from v$flash_recovery_area_usage; select * from v$recovery_file_dest; select space_limit/1024/1024/1024, space_used/1024/1024/1024, space_reclaimable,number_of_files from v$recovery_file_dest; rman target / # archive # 确认归档模式的状态 ARCHIVE LOG LIST; DELETE ARCHIVELOG ALL; # 关闭自动归档 ALTER DATABASE NOARCHIVELOG; # 清空归档日志 ALTER SYSTEM SWITCH LOGFILE; # backup DELETE BACKUP; 初始化设置 alter user system identified by password; ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; ALTER SYSTEM SET db_create_file_dest = \u0026#34;/home/oracle/app/oracle/oradata\u0026#34;; alter tablespace system add datafile \u0026#39;/home/oracle/app/oracle/oradata/helowin/system2.","title":"Oracle"},{"content":"Update Theme\ngit submodule update \u0026ndash;init \u0026ndash;recursive\nNew Post\nhugo new posts/name.md\nSpaces shoud been transformed to escape character.\n","permalink":"https://www.jiangjunjie.cn/posts/hugo/","summary":"Update Theme\ngit submodule update \u0026ndash;init \u0026ndash;recursive\nNew Post\nhugo new posts/name.md\nSpaces shoud been transformed to escape character.","title":"Hugo"},{"content":"CMD: timedatectl set Aisa/Shanghai\ntimedatectl list-timezones | grep -o \u0026#34;Asia/Sh.*\u0026#34; timedatectl set-timezone \u0026#34;Asia/\u0026#34; ","permalink":"https://www.jiangjunjie.cn/posts/ubuntu-timezone/","summary":"CMD: timedatectl set Aisa/Shanghai\ntimedatectl list-timezones | grep -o \u0026#34;Asia/Sh.*\u0026#34; timedatectl set-timezone \u0026#34;Asia/\u0026#34; ","title":"Ubuntu Timezone"},{"content":"","permalink":"https://www.jiangjunjie.cn/posts/k8s/","summary":"","title":"K8s"},{"content":"","permalink":"https://www.jiangjunjie.cn/posts/swagger3/","summary":"","title":"Swagger3"},{"content":"logback-spring.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;configuration scan=\u0026#34;true\u0026#34; scanPeriod=\u0026#34;60 seconds\u0026#34; debug=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;contextName\u0026gt;logback\u0026lt;/contextName\u0026gt; \u0026lt;property name=\u0026#34;LOG_HOME\u0026#34; value=\u0026#34;log\u0026#34;/\u0026gt; \u0026lt;!-- 彩色日志依赖的渲染类 --\u0026gt; \u0026lt;conversionRule conversionWord=\u0026#34;clr\u0026#34; converterClass=\u0026#34;org.springframework.boot.logging.logback.ColorConverter\u0026#34;/\u0026gt; \u0026lt;conversionRule conversionWord=\u0026#34;wex\u0026#34; converterClass=\u0026#34;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\u0026#34;/\u0026gt; \u0026lt;!-- 彩色日志格式 --\u0026gt; \u0026lt;property name=\u0026#34;CONSOLE_LOG_PATTERN\u0026#34; value=\u0026#34;%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }) [%t]{magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wex\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;FILE_LOG_PATTERN\u0026#34; value=\u0026#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex\u0026#34;/\u0026gt; \u0026lt;!--输出到控制台--\u0026gt; \u0026lt;appender name=\u0026#34;console\u0026#34; class=\u0026#34;ch.qos.logback.core.ConsoleAppender\u0026#34;\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;${CONSOLE_LOG_PATTERN}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!--输出到文件--\u0026gt; \u0026lt;appender name=\u0026#34;file\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;fileNamePattern\u0026gt;${LOG_HOME}/logback.%d{yyyy-MM-dd}.log\u0026lt;/fileNamePattern\u0026gt; \u0026lt;maxHistory\u0026gt;30\u0026lt;/maxHistory\u0026gt; \u0026lt;totalSizeCap\u0026gt;1GB\u0026lt;/totalSizeCap\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!--info 级别的日志--\u0026gt; \u0026lt;!-- 按照每天生成日志文件 --\u0026gt; \u0026lt;appender name=\u0026#34;INFO\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;filter class=\u0026#34;ch.qos.logback.classic.filter.LevelFilter\u0026#34;\u0026gt; \u0026lt;level\u0026gt;INFO\u0026lt;/level\u0026gt; \u0026lt;onMatch\u0026gt;ACCEPT\u0026lt;/onMatch\u0026gt; \u0026lt;onMismatch\u0026gt;DENY\u0026lt;/onMismatch\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;${FILE_LOG_PATTERN}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;!--日志文件输出的文件名--\u0026gt; \u0026lt;fileNamePattern\u0026gt;${LOG_HOME}/info.%d{yyyy-MM-dd}.log\u0026lt;/fileNamePattern\u0026gt; \u0026lt;!--日志文件保留天数--\u0026gt; \u0026lt;MaxHistory\u0026gt;30\u0026lt;/MaxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;!--日志文件最大的大小--\u0026gt; \u0026lt;triggeringPolicy class=\u0026#34;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\u0026#34;\u0026gt; \u0026lt;MaxFileSize\u0026gt;10MB\u0026lt;/MaxFileSize\u0026gt; \u0026lt;/triggeringPolicy\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!--WARN 级别的日志--\u0026gt; \u0026lt;appender name=\u0026#34;WARN\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;filter class=\u0026#34;ch.qos.logback.classic.filter.LevelFilter\u0026#34;\u0026gt; \u0026lt;level\u0026gt;WARN\u0026lt;/level\u0026gt; \u0026lt;onMatch\u0026gt;ACCEPT\u0026lt;/onMatch\u0026gt; \u0026lt;onMismatch\u0026gt;DENY\u0026lt;/onMismatch\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;${FILE_LOG_PATTERN}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;fileNamePattern\u0026gt;${LOG_HOME}/warn.%d{yyyy-MM-dd}.log\u0026lt;/fileNamePattern\u0026gt; \u0026lt;MaxHistory\u0026gt;30\u0026lt;/MaxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!--ERROR 级别的日志--\u0026gt; \u0026lt;appender name=\u0026#34;ERROR\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;filter class=\u0026#34;ch.qos.logback.classic.filter.LevelFilter\u0026#34;\u0026gt; \u0026lt;level\u0026gt;ERROR\u0026lt;/level\u0026gt; \u0026lt;onMatch\u0026gt;ACCEPT\u0026lt;/onMatch\u0026gt; \u0026lt;onMismatch\u0026gt;DENY\u0026lt;/onMismatch\u0026gt; \u0026lt;/filter\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;${FILE_LOG_PATTERN}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;fileNamePattern\u0026gt;${LOG_HOME}/error.%d{yyyy-MM-dd}.log\u0026lt;/fileNamePattern\u0026gt; \u0026lt;MaxHistory\u0026gt;30\u0026lt;/MaxHistory\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!-- 测试环境+开发环境. 多个使用逗号隔开. --\u0026gt; \u0026lt;springProfile name=\u0026#34;dev,test\u0026#34;\u0026gt; \u0026lt;root level=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;console\u0026#34;/\u0026gt; \u0026lt;appender-ref ref=\u0026#34;file\u0026#34;/\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;logger name=\u0026#34;com.szht\u0026#34; level=\u0026#34;debug\u0026#34;/\u0026gt; \u0026lt;/springProfile\u0026gt; \u0026lt;!-- 生产环境. --\u0026gt; \u0026lt;springProfile name=\u0026#34;prod\u0026#34;\u0026gt; \u0026lt;root level=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;appender-ref ref=\u0026#34;INFO\u0026#34;/\u0026gt; \u0026lt;appender-ref ref=\u0026#34;WARN\u0026#34;/\u0026gt; \u0026lt;appender-ref ref=\u0026#34;ERROR\u0026#34;/\u0026gt; \u0026lt;/root\u0026gt; \u0026lt;/springProfile\u0026gt; \u0026lt;/configuration\u0026gt; ","permalink":"https://www.jiangjunjie.cn/posts/logback-spring/","summary":"logback-spring.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;configuration scan=\u0026#34;true\u0026#34; scanPeriod=\u0026#34;60 seconds\u0026#34; debug=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;contextName\u0026gt;logback\u0026lt;/contextName\u0026gt; \u0026lt;property name=\u0026#34;LOG_HOME\u0026#34; value=\u0026#34;log\u0026#34;/\u0026gt; \u0026lt;!-- 彩色日志依赖的渲染类 --\u0026gt; \u0026lt;conversionRule conversionWord=\u0026#34;clr\u0026#34; converterClass=\u0026#34;org.springframework.boot.logging.logback.ColorConverter\u0026#34;/\u0026gt; \u0026lt;conversionRule conversionWord=\u0026#34;wex\u0026#34; converterClass=\u0026#34;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter\u0026#34;/\u0026gt; \u0026lt;!-- 彩色日志格式 --\u0026gt; \u0026lt;property name=\u0026#34;CONSOLE_LOG_PATTERN\u0026#34; value=\u0026#34;%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }) [%t]{magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wex\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;FILE_LOG_PATTERN\u0026#34; value=\u0026#34;%d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex\u0026#34;/\u0026gt; \u0026lt;!--输出到控制台--\u0026gt; \u0026lt;appender name=\u0026#34;console\u0026#34; class=\u0026#34;ch.qos.logback.core.ConsoleAppender\u0026#34;\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;${CONSOLE_LOG_PATTERN}\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!--输出到文件--\u0026gt; \u0026lt;appender name=\u0026#34;file\u0026#34; class=\u0026#34;ch.qos.logback.core.rolling.RollingFileAppender\u0026#34;\u0026gt; \u0026lt;rollingPolicy class=\u0026#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy\u0026#34;\u0026gt; \u0026lt;fileNamePattern\u0026gt;${LOG_HOME}/logback.%d{yyyy-MM-dd}.log\u0026lt;/fileNamePattern\u0026gt; \u0026lt;maxHistory\u0026gt;30\u0026lt;/maxHistory\u0026gt; \u0026lt;totalSizeCap\u0026gt;1GB\u0026lt;/totalSizeCap\u0026gt; \u0026lt;/rollingPolicy\u0026gt; \u0026lt;encoder\u0026gt; \u0026lt;pattern\u0026gt;%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n\u0026lt;/pattern\u0026gt; \u0026lt;/encoder\u0026gt; \u0026lt;/appender\u0026gt; \u0026lt;!","title":"Logback Spring"},{"content":"","permalink":"https://www.jiangjunjie.cn/posts/springboot/","summary":"","title":"SpringBoot"},{"content":"build.gradle templates plugins { id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;2.5.0\u0026#39; id \u0026#39;io.spring.dependency-management\u0026#39; version \u0026#39;1.0.11.RELEASE\u0026#39; id \u0026#39;java\u0026#39; } group = \u0026#39;com.example\u0026#39; version = \u0026#39;0.0.1-SNAPSHOT\u0026#39; sourceCompatibility = \u0026#39;1.8\u0026#39; configurations { compileOnly { extendsFrom annotationProcessor } } repositories { maven {url \u0026#39;https://maven.aliyun.com/repository/public\u0026#39;} maven { url \u0026#39;http://192.168.10.204:8081/repository/maven-public/\u0026#39; allowInsecureProtocol true } mavenCentral() } dependencies { // jpa implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-jpa\u0026#39; // swagger mplementation \u0026#39;io.springfox:springfox-boot-starter:3.0.0\u0026#39; // webservice implementation \u0026#39;org.springframework.boot:spring-boot-starter-web-services\u0026#39; // druid implementation \u0026#39;com.alibaba:druid-spring-boot-starter:1.2.5\u0026#39; // mybatis and plus implementation \u0026#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4\u0026#39; implementation \u0026#39;com.baomidou:mybatis-plus-boot-starter:3.4.2\u0026#39; // mybatis dynamic DataSource 多数据源 implementation \u0026#39;com.baomidou:dynamic-datasource-spring-boot-starter:3.3.2\u0026#39; // rabbitmq implementation \u0026#39;org.springframework.boot:spring-boot-starter-amqp\u0026#39; testImplementation \u0026#39;org.springframework.amqp:spring-rabbit-test\u0026#39; // jsoup java spider 爬虫框架 implementation \u0026#39;org.jsoup:jsoup:1.13.1\u0026#39; // spring mail implementation \u0026#39;org.springframework.boot:spring-boot-starter-mail\u0026#39; // activemq implementation \u0026#39;org.springframework.boot:spring-boot-starter-activemq\u0026#39; // activemq next implementation \u0026#39;org.springframework.boot:spring-boot-starter-artemis\u0026#39; // redis implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-redis\u0026#39; // thymeleaf implementation \u0026#39;org.springframework.boot:spring-boot-starter-thymeleaf\u0026#39; // web implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; // web without tomcat and with undertow implementation (\u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39;){ exclude group: \u0026#39;org.springframework.boot\u0026#39;, module: \u0026#39;spring-boot-starter-tomcat\u0026#39; } implementation \u0026#39;org.springframework.boot:spring-boot-starter-undertow\u0026#39; // common lang3 implementation \u0026#39;org.apache.commons:commons-lang3:3.12.0\u0026#39; // common codec implementation \u0026#39;commons-codec:commons-codec:1.15\u0026#39; // fastjson implementation \u0026#39;com.alibaba:fastjson:1.2.76\u0026#39; // ok http implementation \u0026#39;com.squareup.okhttp3:okhttp:4.9.1\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; developmentOnly \u0026#39;org.springframework.boot:spring-boot-devtools\u0026#39; // oracle implementation \u0026#39;com.oracle.database.nls:orai18n:21.1.0.0\u0026#39; runtimeOnly \u0026#39;com.oracle.database.jdbc:ojdbc8\u0026#39; // mysql runtimeOnly \u0026#39;mysql:mysql-connector-java\u0026#39; annotationProcessor \u0026#39;org.springframework.boot:spring-boot-configuration-processor\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; } test { useJUnitPlatform() } ","permalink":"https://www.jiangjunjie.cn/posts/springboot-grade/","summary":"build.gradle templates plugins { id \u0026#39;org.springframework.boot\u0026#39; version \u0026#39;2.5.0\u0026#39; id \u0026#39;io.spring.dependency-management\u0026#39; version \u0026#39;1.0.11.RELEASE\u0026#39; id \u0026#39;java\u0026#39; } group = \u0026#39;com.example\u0026#39; version = \u0026#39;0.0.1-SNAPSHOT\u0026#39; sourceCompatibility = \u0026#39;1.8\u0026#39; configurations { compileOnly { extendsFrom annotationProcessor } } repositories { maven {url \u0026#39;https://maven.aliyun.com/repository/public\u0026#39;} maven { url \u0026#39;http://192.168.10.204:8081/repository/maven-public/\u0026#39; allowInsecureProtocol true } mavenCentral() } dependencies { // jpa implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-jpa\u0026#39; // swagger mplementation \u0026#39;io.springfox:springfox-boot-starter:3.0.0\u0026#39; // webservice implementation \u0026#39;org.springframework.boot:spring-boot-starter-web-services\u0026#39; // druid implementation \u0026#39;com.alibaba:druid-spring-boot-starter:1.2.5\u0026#39; // mybatis and plus implementation \u0026#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.4\u0026#39; implementation \u0026#39;com.","title":"SpringBoot Grade"},{"content":" Charles监听localhost请求 访问http://localhost.charlesproxy.com:port\n浏览器代理，监听端口8888\n","permalink":"https://www.jiangjunjie.cn/posts/charles/","summary":"Charles监听localhost请求 访问http://localhost.charlesproxy.com:port\n浏览器代理，监听端口8888","title":"Charles"},{"content":" 按需修改application-prod.yml，如需打开Swagger，那么需要将enabled设置为true。 打包jar包为app.jar 启动脚本 start.sh nohup java -jar app.jar --spring.profiles.active=prod \u0026gt; nohup.out 2\u0026gt;\u0026amp;1 \u0026amp; 停止脚本 stop.sh PID=$(ps -ef | grep app.jar | grep -v grep | awk \u0026#39;{ print $2 }\u0026#39;) if [ -z \u0026#34;$PID\u0026#34; ] then echo Application is already stopped else echo kill -9 $PID kill -9 $PID fi 查看日志脚本 log.sh tail -f nohup.out 配置nginx server { listen 80; server_name 域名/当前服务器外网IP; location / { proxy_pass http://127.0.0.1:8000; #这里的端口记得改成项目对应的哦 proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } } ","permalink":"https://www.jiangjunjie.cn/posts/backend-deploy/","summary":" 按需修改application-prod.yml，如需打开Swagger，那么需要将enabled设置为true。 打包jar包为app.jar 启动脚本 start.sh nohup java -jar app.jar --spring.profiles.active=prod \u0026gt; nohup.out 2\u0026gt;\u0026amp;1 \u0026amp; 停止脚本 stop.sh PID=$(ps -ef | grep app.jar | grep -v grep | awk \u0026#39;{ print $2 }\u0026#39;) if [ -z \u0026#34;$PID\u0026#34; ] then echo Application is already stopped else echo kill -9 $PID kill -9 $PID fi 查看日志脚本 log.sh tail -f nohup.out 配置nginx server { listen 80; server_name 域名/当前服务器外网IP; location / { proxy_pass http://127.0.0.1:8000; #这里的端口记得改成项目对应的哦 proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } } ","title":"Backend Deploy"},{"content":"前端配置 提供两个配置方式 [History、Hash] 的部署方式，首先修改接口地址，如果是IP地址，那么需要修改为外网IP。 VUE_APP_BASE_API：没有配置ssl，需要将https改成http VUE_APP_WS_API：如果接口是http形式，wss需要改成ws\n项目默认是History模式，不需要做任何修改 Hash模式：修改routers.js，取消hash的注释，修改根目录vue.config.js配置，取消15行的注释（publicPath：process.env.NODE_ENV blah…） 打包前端项目 npm run build:prod # 打包完成后会在根目录生成dist文件夹，我们需要将他上传到服务器中 Nginx配置 History模式 server { listen 80; server_name 域名/外网IP; index index.html; root /usr/share/nginx/html/{name}/dist; #dist上传的路径 # 避免访问出现 404 错误 location / { try_files $uri $uri/ @router; index index.html; } location @router { rewrite ^.*$ /index.html last; } } Hash模式 server { listen 80; server_name 域名/外网IP; location / { root /usr/share/nginx/html/{name}/dist; #dist上传的路径 index index.html; } } 二级目录部署 # Nginx配置 server { listen 80; server_name 域名/外网IP; location /dist { root /usr/share/nginx/html/{name}/test; index index.html; } } ","permalink":"https://www.jiangjunjie.cn/posts/frontend-deploy/","summary":"前端配置 提供两个配置方式 [History、Hash] 的部署方式，首先修改接口地址，如果是IP地址，那么需要修改为外网IP。 VUE_APP_BASE_API：没有配置ssl，需要将https改成http VUE_APP_WS_API：如果接口是http形式，wss需要改成ws\n项目默认是History模式，不需要做任何修改 Hash模式：修改routers.js，取消hash的注释，修改根目录vue.config.js配置，取消15行的注释（publicPath：process.env.NODE_ENV blah…） 打包前端项目 npm run build:prod # 打包完成后会在根目录生成dist文件夹，我们需要将他上传到服务器中 Nginx配置 History模式 server { listen 80; server_name 域名/外网IP; index index.html; root /usr/share/nginx/html/{name}/dist; #dist上传的路径 # 避免访问出现 404 错误 location / { try_files $uri $uri/ @router; index index.html; } location @router { rewrite ^.*$ /index.html last; } } Hash模式 server { listen 80; server_name 域名/外网IP; location / { root /usr/share/nginx/html/{name}/dist; #dist上传的路径 index index.html; } } 二级目录部署 # Nginx配置 server { listen 80; server_name 域名/外网IP; location /dist { root /usr/share/nginx/html/{name}/test; index index.","title":"Frontend Deploy"},{"content":"安装和配置Nginx容器 文件目录 /home/nginx/conf.d 用于存放配置文件\n/home/nginx/cert 用于存放https证书\n/home/nginx/html 用于存放网页文件\n/home/nginx/logs 用于存放日志\n运行nginx容器 docker run -d \\ --name nginx --restart always \\ -p 80:80 -p 443:443 \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf \\ -v /home/nginx/conf.d:/etc/nginx/conf.d \\ -v /home/nginx/logs:/var/log/nginx \\ -v /home/nginx/cert:/etc/nginx/cert \\ -v /home/nginx/html:/usr/share/nginx/html \\ nginx:alpine 配置nginx 这里使用Nginx反向代理访问后端服务，由于容器内部通信，因此需要使用容器的IP，也就是172.17.0.1。 在/home/nginx/conf.d创建一个{name}.conf的配置文件，文件内容如下 server { listen 80; server_name 域名/外网IP; index index.html; root /usr/share/nginx/html/{name}/dist; #dist上传的路径 # 避免访问出现 404 错误 location / { try_files $uri $uri/ @router; index index.html; } location @router { rewrite ^.*$ /index.html last; } # 接口 location /api { proxy_pass http://172.17.0.1:8000; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } # 授权接口 location /auth { proxy_pass http://172.17.0.1:8000; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } # WebSocket 服务 location /webSocket { proxy_pass http://172.17.0.1:8000; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header X-Forwarded-Port $server_port; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; } # 头像 location /avatar { proxy_pass http://172.17.0.1:8000; } # 文件 location /file { proxy_pass http://172.17.0.1:8000; } } # 容器中 /usr/share/nginx/html/{name}/dist 对应宿主机的 /home/nginx/html/{name}/dist 目录，因此文件上传到宿主机的目录即可 将 .env.production 中的接口地址改为 \u0026lsquo;/\u0026rsquo; 修改 api.js 中的 baseUrl = process.env.VUE_APP_BASE_API === \u0026lsquo;/\u0026rsquo; ? \u0026rsquo;\u0026rsquo; : process.env.VUE_APP_BASE_API ","permalink":"https://www.jiangjunjie.cn/posts/nginx/","summary":"安装和配置Nginx容器 文件目录 /home/nginx/conf.d 用于存放配置文件\n/home/nginx/cert 用于存放https证书\n/home/nginx/html 用于存放网页文件\n/home/nginx/logs 用于存放日志\n运行nginx容器 docker run -d \\ --name nginx --restart always \\ -p 80:80 -p 443:443 \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf \\ -v /home/nginx/conf.d:/etc/nginx/conf.d \\ -v /home/nginx/logs:/var/log/nginx \\ -v /home/nginx/cert:/etc/nginx/cert \\ -v /home/nginx/html:/usr/share/nginx/html \\ nginx:alpine 配置nginx 这里使用Nginx反向代理访问后端服务，由于容器内部通信，因此需要使用容器的IP，也就是172.17.0.1。 在/home/nginx/conf.d创建一个{name}.conf的配置文件，文件内容如下 server { listen 80; server_name 域名/外网IP; index index.html; root /usr/share/nginx/html/{name}/dist; #dist上传的路径 # 避免访问出现 404 错误 location / { try_files $uri $uri/ @router; index index.","title":"Nginx"},{"content":" 进入PostgreSQL官网：https://www.postgresql.org/download/linux/redhat/ 选择软件版本和系统版本 在服务器上执行脚本，以CentOS7.4和PostgreSQL13为例 # Install the repository RPM: sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm # Install PostgreSQL: sudo yum install -y postgresql13-server # Optionally initialize the database and enable automatic start: sudo /usr/pgsql-13/bin/postgresql-13-setup initdb sudo systemctl enable postgresql-13 sudo systemctl start postgresql-13 远程连接，密码配置 配置文件路径/var/lib/pgsql/13/data/pg_hba.conf。修改127.0.0.1/32为0.0.0.0/0 配置文件路径/var/lib/pgsql/13/data/postgresql.conf。修改listen_address=\u0026quot;*\u0026quot;,取消port=5432的注释 重启postgresql 配置防火墙，放行5432端口 sudo firewall-cmd --permanent --add-port=5432/tcp sudo firewall-cmd –reload 修改密码 su – postgres psql ALTER USER postgres WITH PASSWORD \u0026#39;这里输入你的密码\u0026#39;; \\q exit ","permalink":"https://www.jiangjunjie.cn/posts/install-postgresql-in-centos-7.4/","summary":" 进入PostgreSQL官网：https://www.postgresql.org/download/linux/redhat/ 选择软件版本和系统版本 在服务器上执行脚本，以CentOS7.4和PostgreSQL13为例 # Install the repository RPM: sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm # Install PostgreSQL: sudo yum install -y postgresql13-server # Optionally initialize the database and enable automatic start: sudo /usr/pgsql-13/bin/postgresql-13-setup initdb sudo systemctl enable postgresql-13 sudo systemctl start postgresql-13 远程连接，密码配置 配置文件路径/var/lib/pgsql/13/data/pg_hba.conf。修改127.0.0.1/32为0.0.0.0/0 配置文件路径/var/lib/pgsql/13/data/postgresql.conf。修改listen_address=\u0026quot;*\u0026quot;,取消port=5432的注释 重启postgresql 配置防火墙，放行5432端口 sudo firewall-cmd --permanent --add-port=5432/tcp sudo firewall-cmd –reload 修改密码 su – postgres psql ALTER USER postgres WITH PASSWORD \u0026#39;这里输入你的密码\u0026#39;; \\q exit ","title":"Install PostgreSQL in CentOS 7.4"},{"content":" 构建与启动Java容器。IntelliJ IDEA运行Gradle bootjar命令 将生成的jar包上传到服务器目录，比如/data目录。 在/data目录创建Dockerfile 文件 FROM java:8 ARG JAR_FILE=./*.jar COPY ${JAR_FILE} app.jar ENV TZ=Asia/Shanghai ENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;,\u0026#34;/app.jar\u0026#34;] 构建镜像 docker build -t {image}:{tag} . (注意最后有点.) 运行 docker run -d \\ --name {name} --restart always \\ -p {port}:{port} \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -e DB_HOST=172.17.0.1 \\ -e DB_PWD=mysql_pwd \\ -e REDIS_HOST=172.17.0.1 \\ -v /data/userData:{镜像内路径} \\ {image}:{tag} docker-compose.yml # coming soon ","permalink":"https://www.jiangjunjie.cn/posts/use-docker-to-deploy-springboot-jar-/","summary":" 构建与启动Java容器。IntelliJ IDEA运行Gradle bootjar命令 将生成的jar包上传到服务器目录，比如/data目录。 在/data目录创建Dockerfile 文件 FROM java:8 ARG JAR_FILE=./*.jar COPY ${JAR_FILE} app.jar ENV TZ=Asia/Shanghai ENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;,\u0026#34;/app.jar\u0026#34;] 构建镜像 docker build -t {image}:{tag} . (注意最后有点.) 运行 docker run -d \\ --name {name} --restart always \\ -p {port}:{port} \\ -e \u0026#34;TZ=Asia/Shanghai\u0026#34; \\ -e DB_HOST=172.17.0.1 \\ -e DB_PWD=mysql_pwd \\ -e REDIS_HOST=172.17.0.1 \\ -v /data/userData:{镜像内路径} \\ {image}:{tag} docker-compose.yml # coming soon ","title":"Use Docker to Deploy SpringBoot Jar "},{"content":"oh-my-posh # https://ohmyposh.dev/docs/installation Install-Module oh-my-posh -Scope CurrentUser -AllowPrerelease Get-PoshThemes code $profile Set-PoshPrompt -Theme paradox . $profile git clone https://github.com/powerline/fonts.git cd fonts ./install.ps1 Install-Module ZLocation -Scope CurrentUser; Import-Module ZLocation; Add-Content -Value \u0026#34;`r`n`r`nImport-Module ZLocation`r`n\u0026#34; -Encoding utf8 -Path $PROFILE.CurrentUserAllHosts ","permalink":"https://www.jiangjunjie.cn/posts/powershell/","summary":"oh-my-posh # https://ohmyposh.dev/docs/installation Install-Module oh-my-posh -Scope CurrentUser -AllowPrerelease Get-PoshThemes code $profile Set-PoshPrompt -Theme paradox . $profile git clone https://github.com/powerline/fonts.git cd fonts ./install.ps1 Install-Module ZLocation -Scope CurrentUser; Import-Module ZLocation; Add-Content -Value \u0026#34;`r`n`r`nImport-Module ZLocation`r`n\u0026#34; -Encoding utf8 -Path $PROFILE.CurrentUserAllHosts ","title":"Powershell"},{"content":"install docker run --rm -p 8080:8080 apereo/cas-initializr:6.3.0 curl http://localhost:8080/starter.tgz -o cas.tgz tar -zxvf cas.tgz chmod +x docker-build.sh chmod +x docker-run.sh ./docker-build.sh ","permalink":"https://www.jiangjunjie.cn/posts/cas/","summary":"install docker run --rm -p 8080:8080 apereo/cas-initializr:6.3.0 curl http://localhost:8080/starter.tgz -o cas.tgz tar -zxvf cas.tgz chmod +x docker-build.sh chmod +x docker-run.sh ./docker-build.sh ","title":"Cas"},{"content":"Install # install wepy version 1.X cnpm install wepy-cli -g error Q：regeneratorRuntime.mark undefined\nA: 关掉小程序开发工具ES6转ES5\n","permalink":"https://www.jiangjunjie.cn/posts/wechat/","summary":"Install # install wepy version 1.X cnpm install wepy-cli -g error Q：regeneratorRuntime.mark undefined\nA: 关掉小程序开发工具ES6转ES5","title":"Wechat"},{"content":"Instal # https://scoop.sh/ iwr -useb get.scoop.sh | iex # if error Set-ExecutionPolicy RemoteSigned -scope CurrentUser scoop install 7zip git scoop bucket add extras scoop install everything diskgenius postman hugo nvm error 重装系统后无法找到scoop菜单和程序 # powershell运行 scoop reset * ","permalink":"https://www.jiangjunjie.cn/posts/scoop/","summary":"Instal # https://scoop.sh/ iwr -useb get.scoop.sh | iex # if error Set-ExecutionPolicy RemoteSigned -scope CurrentUser scoop install 7zip git scoop bucket add extras scoop install everything diskgenius postman hugo nvm error 重装系统后无法找到scoop菜单和程序 # powershell运行 scoop reset * ","title":"Scoop"},{"content":"nvm setting nvm ls nvm ls available nvm install {version} nvm use {version} npm setting npm config set registry https://registry.npm.taobao.org npm config set sass_binary_site \u0026#34;https://npm.taobao.org/mirrors/node-sass\u0026#34; npm config list cnpm settting npm install -g cnpm --registry=https://registry.npm.taobao.org error MSBUILD : error MSB4132: 无法识别工具版本“2.0”。可用的工具版本为 \u0026ldquo;4.0\u0026rdquo;。 npm install --msvs_version 2015 ","permalink":"https://www.jiangjunjie.cn/posts/nodejs/","summary":"nvm setting nvm ls nvm ls available nvm install {version} nvm use {version} npm setting npm config set registry https://registry.npm.taobao.org npm config set sass_binary_site \u0026#34;https://npm.taobao.org/mirrors/node-sass\u0026#34; npm config list cnpm settting npm install -g cnpm --registry=https://registry.npm.taobao.org error MSBUILD : error MSB4132: 无法识别工具版本“2.0”。可用的工具版本为 \u0026ldquo;4.0\u0026rdquo;。 npm install --msvs_version 2015 ","title":"nodeJS"},{"content":"cmd # 下载子模块代码 git submodule update --init --recursive error Git报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决 git config --global http.sslVerify \u0026#34;false\u0026#34; ","permalink":"https://www.jiangjunjie.cn/posts/git/","summary":"cmd # 下载子模块代码 git submodule update --init --recursive error Git报错解决：OpenSSL SSL_read: Connection was reset, errno 10054 错误解决 git config --global http.sslVerify \u0026#34;false\u0026#34; ","title":"Git"},{"content":"cmd conda info --envs conda info -e conda create -n env-name python=X.X activate env-name deactivate conda remove -n env-name --all ","permalink":"https://www.jiangjunjie.cn/posts/conda/","summary":"cmd conda info --envs conda info -e conda create -n env-name python=X.X activate env-name deactivate conda remove -n env-name --all ","title":"Conda"},{"content":"Soft Browser: Chrome/Edge Microsoft Terminal Powershell7 Sougou Input XMind WeChat QQ 向日葵远程控制 360驱动大师 Bandzip Office HBuilderX Java1.8_181 wechat_devtools Jetbrains Toolbox VS Code Axure RP9 Navicat Premium 15 Visual Studio Installer scoop 7zip git everything postman hugo nodejs ","permalink":"https://www.jiangjunjie.cn/posts/win10/","summary":"Soft Browser: Chrome/Edge Microsoft Terminal Powershell7 Sougou Input XMind WeChat QQ 向日葵远程控制 360驱动大师 Bandzip Office HBuilderX Java1.8_181 wechat_devtools Jetbrains Toolbox VS Code Axure RP9 Navicat Premium 15 Visual Studio Installer scoop 7zip git everything postman hugo nodejs ","title":"Win10"},{"content":"start mongodb 4.4 in docker,use ~/mongo/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: mongodb: image: mongo:4.4 command: mongod --auth volumes: - ~/mongo/data:/data/db ports: - 27017:27017 restart: always environment: MONGO_INITDB_ROOT_USERNAME: {username} MONGO_INITDB_ROOT_PASSWORD: {password} ","permalink":"https://www.jiangjunjie.cn/posts/docker-mongodb/","summary":"start mongodb 4.4 in docker,use ~/mongo/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: mongodb: image: mongo:4.4 command: mongod --auth volumes: - ~/mongo/data:/data/db ports: - 27017:27017 restart: always environment: MONGO_INITDB_ROOT_USERNAME: {username} MONGO_INITDB_ROOT_PASSWORD: {password} ","title":"Docker MongoDB"},{"content":"start mysql8 in docker,use ~/mysql/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: mysql: image: mysql:8 container_name: mysql command: --default-authentication-plugin=mysql_native_password volumes: - mysql-data:/var/lib/mysql ports: - 3306:3306 restart: always environment: MYSQL_ROOT_PASSWORD: {your password} TZ: Asia/Shanghai network_mode: bridge volumes: mysql-data: external: true ","permalink":"https://www.jiangjunjie.cn/posts/docker-mysql/","summary":"start mysql8 in docker,use ~/mysql/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: mysql: image: mysql:8 container_name: mysql command: --default-authentication-plugin=mysql_native_password volumes: - mysql-data:/var/lib/mysql ports: - 3306:3306 restart: always environment: MYSQL_ROOT_PASSWORD: {your password} TZ: Asia/Shanghai network_mode: bridge volumes: mysql-data: external: true ","title":"Docker MySQL"},{"content":"start pgadmin4 5.1 in docker docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: pgadmin4: image: dpage/pgadmin4:5.1 ports: - 8081:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} ","permalink":"https://www.jiangjunjie.cn/posts/docker-pgadmin4/","summary":"start pgadmin4 5.1 in docker docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: pgadmin4: image: dpage/pgadmin4:5.1 ports: - 8081:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} ","title":"Docker PgAdmin4"},{"content":"start postgresql 13 and pgadmin4 5.1 in docker,use ~/postgresql/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: postgresql: image: postgres:13 volumes: - ~/postgresql/data:/var/lib/postgresql/data ports: - 5432:5432 restart: always environment: POSTGRES_PASSWORD: {password} pgadmin4: image: dpage/pgadmin4:5.1 ports: - 80:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} ","permalink":"https://www.jiangjunjie.cn/posts/docker-postgresql/","summary":"start postgresql 13 and pgadmin4 5.1 in docker,use ~/postgresql/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: postgresql: image: postgres:13 volumes: - ~/postgresql/data:/var/lib/postgresql/data ports: - 5432:5432 restart: always environment: POSTGRES_PASSWORD: {password} pgadmin4: image: dpage/pgadmin4:5.1 ports: - 80:80 restart: always environment: PGADMIN_DEFAULT_EMAIL: {email} PGADMIN_DEFAULT_PASSWORD: {password} ","title":"Docker PostgreSQL"},{"content":"start rabbitmq 3.8.14 and management plugin in docker docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: rabbitmq: image: rabbitmq:3.8.14-management ports: - 15672:15672 - 5672:5672 restart: always environment: RABBITMQ_DEFAULT_USER: {username} RABBITMQ_DEFAULT_PASS: {password} ","permalink":"https://www.jiangjunjie.cn/posts/docker-rabbitmq/","summary":"start rabbitmq 3.8.14 and management plugin in docker docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: rabbitmq: image: rabbitmq:3.8.14-management ports: - 15672:15672 - 5672:5672 restart: always environment: RABBITMQ_DEFAULT_USER: {username} RABBITMQ_DEFAULT_PASS: {password} ","title":"Docker RabbitMQ"},{"content":"start redis 6.2 in docker,use ~/redis/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: redis: image: redis:latest container_name: redis command: redis-server --requirepass {password} --appendonly yes #command: redis-server /usr/local/etc/redis/redis.conf volumes: - ~/redis/redis.conf:/usr/local/etc/redis/redis.conf - redis-data:/data ports: - 6379:6379 restart: always network_mode: bridge volumes: redis-data: external: true redis.conf\nrequirepass {password} appendonly yes daemonize no ","permalink":"https://www.jiangjunjie.cn/posts/docker-redis/","summary":"start redis 6.2 in docker,use ~/redis/data to persist data docker-compose.yml\nversion: \u0026#39;3.1\u0026#39; services: redis: image: redis:latest container_name: redis command: redis-server --requirepass {password} --appendonly yes #command: redis-server /usr/local/etc/redis/redis.conf volumes: - ~/redis/redis.conf:/usr/local/etc/redis/redis.conf - redis-data:/data ports: - 6379:6379 restart: always network_mode: bridge volumes: redis-data: external: true redis.conf\nrequirepass {password} appendonly yes daemonize no ","title":"Docker Redis"},{"content":"Open Powershell core in Terminal # settings.json \u0026#34;terminal.integrated.shell.windows\u0026#34;: \u0026#34;{path to pwsh.exe}\u0026#34;, ","permalink":"https://www.jiangjunjie.cn/posts/vscode/","summary":"Open Powershell core in Terminal # settings.json \u0026#34;terminal.integrated.shell.windows\u0026#34;: \u0026#34;{path to pwsh.exe}\u0026#34;, ","title":"Vscode"},{"content":"win10 powershell\ncode $profile # Microsoft.PowerShell_profile.ps1 function proxy { $env:HTTP_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; $env:HTTPS_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; } function unproxy { $env:HTTP_PROXY=\u0026#34;\u0026#34; $env:HTTPS_PROXY=\u0026#34;\u0026#34; } ","permalink":"https://www.jiangjunjie.cn/posts/proxy/","summary":"win10 powershell\ncode $profile # Microsoft.PowerShell_profile.ps1 function proxy { $env:HTTP_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; $env:HTTPS_PROXY=\u0026#34;http://127.0.0.1:7890\u0026#34; } function unproxy { $env:HTTP_PROXY=\u0026#34;\u0026#34; $env:HTTPS_PROXY=\u0026#34;\u0026#34; } ","title":"Proxy"},{"content":"generate ssh-keygen -t ed25519 -C \u0026#34;comment\u0026#34; # win10 cat ~/.ssh/id_ed25519.pub | clip ","permalink":"https://www.jiangjunjie.cn/posts/ssh/","summary":"generate ssh-keygen -t ed25519 -C \u0026#34;comment\u0026#34; # win10 cat ~/.ssh/id_ed25519.pub | clip ","title":"Ssh"},{"content":"office 登录 0x80190001错误 管理员运行powershell\nnetsh int ip reset windows store打不开 管理员运行powershell\nnetsh winsock reset ","permalink":"https://www.jiangjunjie.cn/posts/win10-login-error/","summary":"office 登录 0x80190001错误 管理员运行powershell\nnetsh int ip reset windows store打不开 管理员运行powershell\nnetsh winsock reset ","title":"Win10"},{"content":"Install Docker Compose V2 in CentOS7.4 Docker Engine Installed cmd mkdir -p ~/.docker/cli-plugins/ curl -SL https://github.com/docker/compose/releases/download/v2.0.1/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose chmod +x ~/.docker/cli-plugins/docker-compose To install Docker Compose for all users on your system, replace ~/.docker/cli-plugins with /usr/local/lib/docker/cli-plugins docker compose version 新版本Docker自带Docker Compose V2 ","permalink":"https://www.jiangjunjie.cn/posts/docker-compose/","summary":"Install Docker Compose V2 in CentOS7.4 Docker Engine Installed cmd mkdir -p ~/.docker/cli-plugins/ curl -SL https://github.com/docker/compose/releases/download/v2.0.1/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose chmod +x ~/.docker/cli-plugins/docker-compose To install Docker Compose for all users on your system, replace ~/.docker/cli-plugins with /usr/local/lib/docker/cli-plugins docker compose version 新版本Docker自带Docker Compose V2 ","title":"Docker Compose"},{"content":"Install # use aliyun mirror curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun mirrors { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://dockerproxy.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34; ] } # registry sudo docker run -d -p 5000:5000 --restart always --name registry -v docker-registry:/var/lib/registry registry:2 # nexus oss3 sudo docker volume create nexus-data sudo docker run -d --restart always -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3 issue 在docker容器内部执行 jmap命令报错 Operation not permitted # Docker 自1.10版本开始加入的安全特性。类似于 jmap 这些 JDK 工具依赖于 Linux 的 PTRACE_ATTACH,而是Docker自1.10在默认的seccomp配置文件中禁用了ptrace # 如果使用docker-compose启动容器,如下加入 cap_add即可 # example version: \u0026#39;2\u0026#39; services: content1: image: xxx/content container_name: content restart: always cap_add: - SYS_PTRACE expose: - 80 ports: - \u0026#34;8080:80\u0026#34; volumes: ...... # 使用原生docker run命令增加–cap-add=SYS_PTRACE docker run –cap-add=SYS_PTRACE ........ ","permalink":"https://www.jiangjunjie.cn/posts/docker/","summary":"Install # use aliyun mirror curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun mirrors { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://dockerproxy.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34; ] } # registry sudo docker run -d -p 5000:5000 --restart always --name registry -v docker-registry:/var/lib/registry registry:2 # nexus oss3 sudo docker volume create nexus-data sudo docker run -d --restart always -p 8081:8081 --name nexus -v nexus-data:/nexus-data sonatype/nexus3 issue 在docker容器内部执行 jmap命令报错 Operation not permitted # Docker 自1.10版本开始加入的安全特性。类似于 jmap 这些 JDK 工具依赖于 Linux 的 PTRACE_ATTACH,而是Docker自1.","title":"Docker"},{"content":"Introduce Tell you how to install Gitlab CE(Community Edition) in CentOS 7.4 step by step.\nDoc https://about.gitlab.com/install/?version=ce#centos-7\nInstall # Prerequisite sudo yum install -y curl policycoreutils-python openssh-server openssh-clients perl sudo systemctl enable sshd sudo systemctl start sshd # Firewall setting sudo firewall-cmd --permanent --add-service=http sudo firewall-cmd --permanent --add-service=https sudo systemctl reload firewalld # Install Gitlab ce repo curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash # Install Gitlab CE and set EXTERNAL_URL(your ip or host,http or https) sudo EXTERNAL_URL=\u0026#34;http://192.168.10.198\u0026#34; yum install -y gitlab-ce Login Go to http://192.168.10.198(your ip or host), set your root password when you first login\n","permalink":"https://www.jiangjunjie.cn/posts/install-gitlab-ce-in-centos-7.4/","summary":"Introduce Tell you how to install Gitlab CE(Community Edition) in CentOS 7.4 step by step.\nDoc https://about.gitlab.com/install/?version=ce#centos-7\nInstall # Prerequisite sudo yum install -y curl policycoreutils-python openssh-server openssh-clients perl sudo systemctl enable sshd sudo systemctl start sshd # Firewall setting sudo firewall-cmd --permanent --add-service=http sudo firewall-cmd --permanent --add-service=https sudo systemctl reload firewalld # Install Gitlab ce repo curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash # Install Gitlab CE and set EXTERNAL_URL(your ip or host,http or https) sudo EXTERNAL_URL=\u0026#34;http://192.","title":"Install Gitlab CE in CentOS 7.4"},{"content":"Install Hugo # macos brew install hugo # windows using scoop scoop install hugo Deploy to Middleware hugo --minify Then, upload files in the public folder to middleware folder(eg. html folder in nginx)\nDeploy to Github Pages Coming soon\u0026hellip;\n","permalink":"https://www.jiangjunjie.cn/posts/static-site-using-hugo/","summary":"Install Hugo # macos brew install hugo # windows using scoop scoop install hugo Deploy to Middleware hugo --minify Then, upload files in the public folder to middleware folder(eg. html folder in nginx)\nDeploy to Github Pages Coming soon\u0026hellip;","title":"Static Site using Hugo"}]